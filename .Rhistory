sentimentos <- sentimentos %>%
group_by(Termo) %>%
summarise(positivo = max(PosScore), negativo = max(NegScore)) %>%
mutate(Termo = trimws(Termo, which = "left"))
pos <- sentimentos[, c(1, 2)]
neg <- sentimentos[, c(1, 3)]
bojack_sentimento_positivo <- 0
bojack_sentimento_negativo <- 0
dim(bojack_corpus_df)
for (j in 1:(dim(bojack_corpus_df)[2]-1)){
# palavras do j-esimo episodio
a <- bojack_corpus_matrix[, j]
a <- data.frame(Termo = names(a),
Ocorrencias = a)
row.names(a) <- NULL
# juntando sentimentos com as palavras do episodio - caso positivo
x <- left_join(a, pos, by = "Termo") %>%
na.omit()
sentimento_positivo <- sum(x$Ocorrencias*x$positivo)/sum(a$Ocorrencias)
# juntando sentimentos com as palavras do episodio - caso negativo
x <- left_join(a, neg, by = "Termo") %>%
na.omit()
sentimento_negativo <- sum(x$Ocorrencias*x$negativo)/sum(a$Ocorrencias)
bojack_sentimento_positivo[j] <- sentimento_positivo
bojack_sentimento_negativo[j] <- sentimento_negativo
}
bojack_plot <- data.frame(episodio = 1:length(bojack_sentimento_positivo),
temporada = factor(temporadas),
positivo = bojack_sentimento_positivo,
negativo = bojack_sentimento_negativo)
ggplot(bojack_plot, aes(x = episodio, colour = temporada)) +
geom_line(aes(y = positivo)) +
geom_line(aes(y = -negativo)) +
scale_x_continuous(breaks = seq(12, 60, 12)) +
labs(x = "Episódio", y = "Sentimento", colour = "Temporada", title = "Bojack Horseman") +
scale_colour_viridis_d()
temporadas <- rep(1:5, each = 12)
bojack_corpus <- t(apply(bojack_corpus_matrix, 1, function(x) tapply(x, temporadas, sum)))
colnames(bojack_corpus) <- paste("S0", 1:5, sep = "")
bojack_corpus_melt <- melt(bojack_corpus_df)
names(bojack_corpus_melt) <- c("palavra", "temporada", "ocorrencias")
bojack_corpus_melt
plot.seriado <- function(dados, season, cor = 0){
grafico <- dados %>%
filter(temporada == season) %>%
top_n(n = 10, wt = ocorrencias) %>%
arrange(desc(ocorrencias)) %>%
ggplot(., aes(x = reorder(palavra, ocorrencias), y = ocorrencias, fill = temporada)) +
geom_col(show.legend = FALSE) +
labs(x = "", y = "", title = season) +
coord_flip() +
scale_fill_viridis_d(begin = cor)
return(grafico)
}
s01 <- plot.seriado(bojack_corpus_melt, "S01", 0.00)
s02 <- plot.seriado(bojack_corpus_melt, "S02", 0.25)
s03 <- plot.seriado(bojack_corpus_melt, "S03", 0.50)
s04 <- plot.seriado(bojack_corpus_melt, "S04", 0.75)
s05 <- plot.seriado(bojack_corpus_melt, "S05", 1.00)
grid.arrange(s01, s02, s03, s04, s05, left = "Palavras", bottom = "Número de Ocorrências")
bojack_corpus_matrix
sentimentos <- read.table(file = "sentiment/sentiword.txt", sep = "\t", header = TRUE)
sentimentos <- sentimentos %>%
group_by(Termo) %>%
summarise(positivo = max(PosScore), negativo = max(NegScore)) %>%
mutate(Termo = trimws(Termo, which = "left"))
pos <- sentimentos[, c(1, 2)]
neg <- sentimentos[, c(1, 3)]
bojack_sentimento_positivo <- 0
bojack_sentimento_negativo <- 0
for (j in 1:(dim(bojack_corpus_df)[2]-1)){
# palavras do j-esimo episodio
a <- bojack_corpus_matrix[, j]
a <- data.frame(Termo = names(a),
Ocorrencias = a)
row.names(a) <- NULL
# juntando sentimentos com as palavras do episodio - caso positivo
x <- left_join(a, pos, by = "Termo") %>%
na.omit()
sentimento_positivo <- sum(x$Ocorrencias*x$positivo)/sum(a$Ocorrencias)
# juntando sentimentos com as palavras do episodio - caso negativo
x <- left_join(a, neg, by = "Termo") %>%
na.omit()
sentimento_negativo <- sum(x$Ocorrencias*x$negativo)/sum(a$Ocorrencias)
bojack_sentimento_positivo[j] <- sentimento_positivo
bojack_sentimento_negativo[j] <- sentimento_negativo
}
bojack_plot <- data.frame(episodio = 1:length(bojack_sentimento_positivo),
temporada = factor(temporadas),
positivo = bojack_sentimento_positivo,
negativo = bojack_sentimento_negativo)
ggplot(bojack_plot, aes(x = episodio, colour = temporada)) +
geom_line(aes(y = positivo)) +
geom_line(aes(y = -negativo)) +
scale_x_continuous(breaks = seq(12, 60, 12)) +
labs(x = "Episódio", y = "Sentimento", colour = "Temporada", title = "Bojack Horseman") +
scale_colour_viridis_d()
fdp.GUCU <- function(x){
if(x>-1 && x < 1){
(0.55)*exp(-((x)^2)/2)/sqrt(2*pi)
}else{
(1.249042)*1/(pi*(1+(x)^2))
}
}
x <- seq(-4,4, by=0.1)
plot(x, fdp.GUCU(x), type="l", ylim = c(0,0.4))
dnorm(seq(-1, 1))
dnorm(seq(-1, 1, by = 0.01))
?dcauchy
dnorm(1)
dcauchy(1)
x <- c(dcauchy(seq(-4, -1, by = 0.01)),
dnorm(seq(-1, 1, by = 0.01)),
dcauchy(seq(1, 4, by = 0.01))
)
plot(x)
(0.55)*exp(-((x)^2)/2)/sqrt(2*pi)
(0.55)*exp(-((0)^2)/2)/sqrt(2*pi)
fdp.GUCU <- function(x){
if(x>-1 && x < 1){
(0.55)*exp(-((x)^2)/2)/sqrt(2*pi)
}else{
(1.249042)*1/(pi*(1+(x)^2))
}
}
x <- seq(-4,4, by=0.1)
fdp.GUCU(x)
x <- c(dcauchy(seq(-4, -1, by = 0.1)),
dnorm(seq(-1, 1, by = 0.1)),
dcauchy(seq(1, 4, by = 0.1))
)
plot(x)
x <- seq(-4,4, by=0.1)
plot(x, fdp.GUCU(x), type="l", ylim = c(0,0.4))
fdp.GUCU(0)
x
x <- seq(-4,4, by=0.1)
data.frame(x, fdp.GUCU(x))
x
x>-1 && x < 1
x
x>-1
x>-1 && x < 1
x>-1 & x < 1
fdp.GUCU <- function(x){
if(x>-1 & x < 1){
(0.55)*exp(-((x)^2)/2)/sqrt(2*pi)
}else{
(1.249042)*1/(pi*(1+(x)^2))
}
}
x <- seq(-4,4, by=0.1)
plot(x, fdp.GUCU(x), type="l", ylim = c(0,0.4))
x>-1 & x < 1
x>-1
x < 1
x>-1 && x < 1
x>-1 & x < 1
indices <- x>-1 & x < 1
(1.249042)*1/(pi*(1+(x[indices])^2))
fdp.GUCU <- function(x){
if(x>-1 & x < 1){
(0.55)*exp(-((x)^2)/2)/sqrt(2*pi)
}else{
(1.249042)*1/(pi*(1+(x)^2))
}
}
x <- seq(-4,4, by=0.1)
plot(x, fdp.GUCU(x), type="l", ylim = c(0,0.4))
x>-1 && x < 1
x
x>-1 & x < 1
x[x>-1 & x < 1]
which[x>-1 & x < 1]
which[x[x>-1 & x < 1]]
which(x[x>-1 & x < 1])
x[x>-1 & x < 1]
which(x>-1 & x < 1)
(0.55)*exp(-((x[which(x>-1 & x < 1)])^2)/2)/sqrt(2*pi)
x <- c(dcauchy(seq(-4, -1, by = 0.1)),
dnorm(seq(-1, 1, by = 0.1)),
dcauchy(seq(1, 4, by = 0.1))
)
plot(x)
integrate(dnorm, -Inf, Inf)
integrate(dnorm, -1, 1)
integrate(dcauchy, -Inf, -1)
integrate(dcauchy, 1, Inf)
brooklyn99 <- read.subtitles.serie(dir = "subtitles/brooklyn99_horseman/")
brooklyn99 <- read.subtitles.serie(dir = "subtitles/brooklyn99/")
brooklyn99_corpus <- tmCorpus(brooklyn99)
brooklyn99_corpus <- tm_map(brooklyn99_corpus, content_transformer(tolower))
brooklyn99_corpus <- tm_map(brooklyn99_corpus, removePunctuation)
brooklyn99_corpus <- tm_map(brooklyn99_corpus, removeNumbers)
brooklyn99_corpus <- tm_map(brooklyn99_corpus, removeWords, stopwords("portuguese"))
brooklyn99_corpus <- tm_map(brooklyn99_corpus, stripWhitespace)
brooklyn99_corpus <- TermDocumentMatrix(brooklyn99_corpus)
brooklyn99_corpus_matrix <- as.matrix(brooklyn99_corpus)
lemma_dic <- read.delim(file = "lemmatization/lemmatization-pt.txt", header = FALSE, stringsAsFactors = FALSE)
names(lemma_dic) <- c("stem", "term")
palavras <- row.names(brooklyn99_corpus_matrix)
ti <- proc.time()
for (j in 1:length(palavras)){
comparacao <- palavras[j] == lemma_dic$term
if (sum(comparacao) == 1){
palavras[j] <- as.character(lemma_dic$stem[comparacao])
} else {
palavras[j] <- palavras[j]
}
}
proc.time() - ti
palavras_brooklyn99 <- palavras
brooklyn99_corpus_df <- as.data.frame(brooklyn99_corpus_matrix)
row.names(brooklyn99_corpus_df) <- NULL
brooklyn99_corpus_df$palavras <- palavras_brooklyn99
brooklyn99_corpus_df <- brooklyn99_corpus_df %>%
group_by(palavras) %>%
summarise_all(sum)
temporadas <- c(rep(1, 22),
rep(2, 23),
rep(3, 23),
rep(4, 22),
rep(5, 22))
brooklyn99_corpus <- t(apply(brooklyn99_corpus_matrix, 1, function(x) tapply(x, temporadas, sum)))
colnames(brooklyn99_corpus) <- paste("S0", 1:5, sep = "")
brooklyn99_corpus_melt <- melt(brooklyn99_corpus_df)
names(brooklyn99_corpus_melt) <- c("palavra", "temporada", "ocorrencias")
brooklyn99_corpus_melt
plot.seriado <- function(dados, season, cor = 0){
grafico <- dados %>%
filter(temporada == season) %>%
top_n(n = 10, wt = ocorrencias) %>%
arrange(desc(ocorrencias)) %>%
ggplot(., aes(x = reorder(palavra, ocorrencias), y = ocorrencias, fill = temporada)) +
geom_col(show.legend = FALSE) +
labs(x = "", y = "", title = season) +
coord_flip() +
scale_fill_viridis_d(begin = cor)
return(grafico)
}
s01 <- plot.seriado(brooklyn99_corpus_melt, "S01", 0.00)
s02 <- plot.seriado(brooklyn99_corpus_melt, "S02", 0.25)
s03 <- plot.seriado(brooklyn99_corpus_melt, "S03", 0.50)
s04 <- plot.seriado(brooklyn99_corpus_melt, "S04", 0.75)
s05 <- plot.seriado(brooklyn99_corpus_melt, "S05", 1.00)
grid.arrange(s01, s02, s03, s04, s05, left = "Palavras", bottom = "Número de Ocorrências")
brooklyn99_corpus_matrix
sentimentos <- read.table(file = "sentiment/sentiword.txt", sep = "\t", header = TRUE)
sentimentos <- sentimentos %>%
group_by(Termo) %>%
summarise(positivo = max(PosScore), negativo = max(NegScore)) %>%
mutate(Termo = trimws(Termo, which = "left"))
pos <- sentimentos[, c(1, 2)]
neg <- sentimentos[, c(1, 3)]
brooklyn99_sentimento_positivo <- 0
brooklyn99_sentimento_negativo <- 0
for (j in 1:(dim(brooklyn99_corpus_df)[2]-1)){
# palavras do j-esimo episodio
a <- brooklyn99_corpus_matrix[, j]
a <- data.frame(Termo = names(a),
Ocorrencias = a)
row.names(a) <- NULL
# juntando sentimentos com as palavras do episodio - caso positivo
x <- left_join(a, pos, by = "Termo") %>%
na.omit()
sentimento_positivo <- sum(x$Ocorrencias*x$positivo)/sum(a$Ocorrencias)
# juntando sentimentos com as palavras do episodio - caso negativo
x <- left_join(a, neg, by = "Termo") %>%
na.omit()
sentimento_negativo <- sum(x$Ocorrencias*x$negativo)/sum(a$Ocorrencias)
brooklyn99_sentimento_positivo[j] <- sentimento_positivo
brooklyn99_sentimento_negativo[j] <- sentimento_negativo
}
brooklyn99_plot <- data.frame(episodio = 1:length(brooklyn99_sentimento_positivo),
temporada = factor(temporadas),
positivo = brooklyn99_sentimento_positivo,
negativo = brooklyn99_sentimento_negativo)
ggplot(brooklyn99_plot, aes(x = episodio, colour = temporada)) +
geom_line(aes(y = positivo)) +
geom_line(aes(y = -negativo)) +
scale_x_continuous(breaks = seq(12, 60, 12)) +
labs(x = "Episódio", y = "Sentimento", colour = "Temporada", title = "Bojack Horseman") +
scale_colour_viridis_d()
brooklyn99_sentimento_positivo
mean(bojack_sentimento_positivo)
mean(brooklyn99_sentimento_positivo)
mean(bojack_sentimento_negativo)
mean(brooklyn99_sentimento_negativo)
ggplot(brooklyn99_plot, aes(x = episodio, colour = temporada)) +
geom_line(aes(y = positivo)) +
geom_line(aes(y = -negativo)) +
scale_x_continuous(breaks = c(22, 45, 68, 90, 112)) +
labs(x = "Episódio", y = "Sentimento", colour = "Temporada", title = "Bojack Horseman") +
scale_colour_viridis_d()
knitr::opts_chunk$set(echo = FALSE, fig.width=6, height=3, warning = FALSE)
heat_map <- dados %>%
group_by(ano_ingresso_ufrn, ano_obtencao_doutorado) %>%
summarise(total = sum(n_artigos_2014_2017))
knitr::opts_chunk$set(echo = FALSE, fig.width=6, height=3, warning = FALSE)
############################
### preparacao dos dados ###
############################
# pacotes necessários
library(MASS)
library(tidyverse)
theme_set(theme_bw())
library(ggfortify)
library(reshape2)
library(gridExtra)
library(pscl)
library(lmtest)
library(countreg)
library(ggfortify)
library(Rtsne)
library(corrplot)
tsne.ggplot <- function(tsne_out){
tsne.ggplot <- data.frame(x = tsne_out$Y[,1],
y = tsne_out$Y[,2])
return(tsne.ggplot)
}
library(knitr)
library(kableExtra)
source("autoplot.countreg.R")
source("modelos_ajustados.R")
source("modelos_ajustados_a1.R")
source("logit.R")
source("inv.logit.R")
source("interpretacao.R")
# leitura dos dados
dados <- read.csv(file="dados_2019.csv", sep=";")
dim(dados)
str(dados)
# transforma a variavel `ano_ingresso_ufrn` em numero inteiro
dados$ano_ingresso_ufrn <- 1000*dados$ano_ingresso_ufrn
summary(dados$ano_ingresso_ufrn)
# transforma a variavel `ano_obtencao_doutorado` em numero inteiro
dados$ano_obtencao_doutorado <- as.character(dados$ano_obtencao_doutorado)
dados$ano_obtencao_doutorado[dados$ano_obtencao_doutorado==""] <- NA
dados$ano_obtencao_doutorado <- as.numeric(dados$ano_obtencao_doutorado)
# manter soh quem ingressou ateh 2017
dados <- dados %>%
filter(ano_ingresso_ufrn <= 2017)
# cria a variavel `horas_ensino_ultimos_2_anos`
dados$horas_ensino_ultimos_2_anos <- dados$horas_aula_graduacao_2017_2 +
dados$horas_aula_graduacao_2017_1 +
dados$horas_aula_graduacao_2016_2 +
dados$horas_aula_graduacao_2016_1 +
dados$horas_aula_posgraduacao_2017_2 +
dados$horas_aula_posgraduacao_2017_1 +
dados$horas_aula_posgraduacao_2016_2 +
dados$horas_aula_posgraduacao_2016_1
# cria variavel com as horas de ensino na graduacao e na pos-graduacao
dados$horas_ensino_graduacao_2014_2017 <-
(dados$horas_aula_graduacao_2017_2 +
dados$horas_aula_graduacao_2017_1 +
dados$horas_aula_graduacao_2016_2 +
dados$horas_aula_graduacao_2016_1 +
dados$horas_aula_graduacao_2015_2 +
dados$horas_aula_graduacao_2015_1 +
dados$horas_aula_graduacao_2014_2 +
dados$horas_aula_graduacao_2014_1)/4
dados$horas_ensino_posgraduacao_2014_2017 <-
(dados$horas_aula_posgraduacao_2017_2 +
dados$horas_aula_posgraduacao_2017_1 +
dados$horas_aula_posgraduacao_2016_2 +
dados$horas_aula_posgraduacao_2016_1 +
dados$horas_aula_posgraduacao_2015_2 +
dados$horas_aula_posgraduacao_2015_1 +
dados$horas_aula_posgraduacao_2014_2 +
dados$horas_aula_posgraduacao_2014_1)/4
# manter apenas os ativos
dados <- dados %>%
filter(situacao=="Ativo Permanente") %>%
filter(horas_ensino_ultimos_2_anos>0)
# checar os anos
summary(dados$ano_ingresso_ufrn)
summary(dados$ano_obtencao_doutorado)
dados$ano_obtencao_doutorado[which(dados$ano_obtencao_doutorado > 2018)]
dados[which(dados$ano_obtencao_doutorado > 2018), ]
# browseURL("https://sigaa.ufrn.br/sigaa/public/docente/portal.jsf?siape=2275877")
# substiuir o ano de 2104 por 2014
dados[which(dados$ano_obtencao_doutorado == 2104), "ano_obtencao_doutorado"] <- 2014
# ano_obtencao_doutorado vs ano_ingresso_ufrn
heat_map <- table(dados$ano_ingresso_ufrn, dados$ano_obtencao_doutorado)
heat_map <- melt(heat_map)
ggplot(heat_map, aes(x=Var1, y=Var2, fill=value)) +
geom_tile(alpha=0.75) +
scale_fill_gradient(low = "white", high = "red", trans="sqrt", breaks=seq(0, 6, 2)^2, labels=seq(0, 6, 2)^2) +
labs(x="Ano de Ingresso na UFRN", y="Ano de Obtenção do Doutorado", fill="Ronaldo")
# cria variavel `n_artigos_total`
dados$n_artigos_total <- dados$n_artigos_a1_total +
dados$n_artigos_a2_total +
dados$n_artigos_b1_total +
dados$n_artigos_b2_total +
dados$n_artigos_b3_total +
dados$n_artigos_b4_total +
dados$n_artigos_b5_total +
dados$n_artigos_c_total# +
#dados$n_artigos_sem_qualis_total
# cria variavel `n_artigos_2014_2017`
dados$n_artigos_2014_2017 <- dados$n_artigos_a1_2014_2017 +
dados$n_artigos_a2_2014_2017 +
dados$n_artigos_b1_2014_2017 +
dados$n_artigos_b2_2014_2017 +
dados$n_artigos_b3_2014_2017 +
dados$n_artigos_b4_2014_2017 +
dados$n_artigos_b5_2014_2017 +
dados$n_artigos_c_2014_2017 #+
#dados$n_artigos_sem_qualis_2014_2017
# cria variavel `n_artigos_sem_doutorado`
dados$n_artigos_sem_doutorado <- dados$n_artigos_a1_sem_doutorado +
dados$n_artigos_a2_sem_doutorado +
dados$n_artigos_b1_sem_doutorado +
dados$n_artigos_b2_sem_doutorado +
dados$n_artigos_b3_sem_doutorado +
dados$n_artigos_b4_sem_doutorado +
dados$n_artigos_b5_sem_doutorado +
dados$n_artigos_c_sem_doutorado # +
# nao existe `dados$n_artigos_sem_qualis_sem_doutorado`
# cria variavel com o total de publicacoes
dados$n_publicacoes_total <-
dados$n_artigos_total +
dados$n_capitulos_livros_publicados_total +
dados$n_livros_publicados_total
dados$n_publicacoes_2014_2017 <-
dados$n_artigos_2014_2017 +
dados$n_capitulos_livros_publicados_2014_2017 +
dados$n_livros_publicados_2014_2017
# simplifica o nome dos professores para PRIMEIRO NOME +
# ULTIMO SOBRENOME, soh pra facilitar a visualizacao
x <- as.character(dados$nome)
dados$nome_simples <- paste(unlist(lapply(strsplit(x, split=" "), head, n=1)),
sobrenome=unlist(lapply(strsplit(x, split=" "), tail, n=1)))
# converter livros para A2 e capitulos de livros para
# capitulos de livros
# dados$n_artigos_a2_total     <- dados$n_livros_publicados_total
# dados$n_artigos_a2_2014_2017 <- dados$n_livros_publicados_2014_2017
# dados$n_artigos_b2_total     <- dados$n_capitulos_livros_publicados_total
# dados$n_artigos_b2_2014_2017 <- dados$n_capitulos_livros_publicados_2014_2017
# cria as variaveis
#
# dados$n_artigos_a1e_total
# dados$n_artigos_a1e_2014_2017
# n_artigos_a1e_sem_doutorado
#
# baseado em Diniz-Filho et al. (2016)
p_a1 <- 1.00
p_a2 <- 0.85
p_b1 <- 0.70
p_b2 <- 0.55
p_b3 <- 0.40
p_b4 <- 0.25
p_b5 <- 0.10
dados$n_artigos_a1e_total <-
p_a1*dados$n_artigos_a1_total +
p_a2*(dados$n_artigos_a2_total + dados$n_livros_publicados_total) +
p_b1*dados$n_artigos_b1_total +
p_b2*dados$n_artigos_b2_total +
p_b3*dados$n_artigos_b3_total +
p_b4*dados$n_artigos_b4_total +
p_b5*dados$n_artigos_b5_total
dados$n_artigos_a1e_2014_2017 <-
p_a1*dados$n_artigos_a1_2014_2017 +
p_a2*(dados$n_artigos_a2_2014_2017 + dados$n_livros_publicados_2014_2017) +
p_b1*dados$n_artigos_b1_2014_2017 +
p_b2*dados$n_artigos_b2_2014_2017 +
p_b3*dados$n_artigos_b3_2014_2017 +
p_b4*dados$n_artigos_b4_2014_2017 +
p_b5*dados$n_artigos_b5_2014_2017
dados$n_artigos_a1e_sem_doutorado <-
p_a1*dados$n_artigos_a1_sem_doutorado +
p_a2*dados$n_artigos_a2_sem_doutorado +
p_b1*dados$n_artigos_b1_sem_doutorado +
p_b2*dados$n_artigos_b2_sem_doutorado +
p_b3*dados$n_artigos_b3_sem_doutorado +
p_b4*dados$n_artigos_b4_sem_doutorado +
p_b5*dados$n_artigos_b5_sem_doutorado
# conferir se ha siape ou nomes repetidos
dados %>%
group_by(siape) %>%
count() %>%
arrange(desc(n))
dados %>%
group_by(nome) %>%
count() %>%
arrange(desc(n))
# CLEBIA BEZERRA DA SILVA e GLEYDSON KLEBER LOPES DE OLIVEIRA
# aparecem duas vezes. tem que ver porque isso ocorre
dados %>%
filter(nome=="CLEBIA BEZERRA DA SILVA") %>%
select(nome, siape, departamento, ano_ingresso_ufrn, ano_obtencao_doutorado)
heat_map <- dados %>%
group_by(ano_ingresso_ufrn, ano_obtencao_doutorado) %>%
summarise(total = sum(n_artigos_2014_2017))
ggplot(heat_map, aes(x=ano_ingresso_ufrn, y=ano_obtencao_doutorado, fill=total)) +
geom_tile(alpha=0.75) +
scale_fill_gradient(low = "white", high = "red", breaks=seq(0, 500, 100), labels=seq(0, 500, 100)) +
labs(x="Ano de Ingresso na UFRN", y="Ano de Obtenção do Doutorado", fill="Ronaldo") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
heat_map <- dados %>%
group_by(ano_ingresso_ufrn, ano_obtencao_doutorado) %>%
summarise(total = sum(n_artigos_2014_2017))
ggplot(heat_map, aes(x=ano_ingresso_ufrn, y=ano_obtencao_doutorado, fill=total)) +
geom_tile(alpha=0.75) +
scale_fill_gradient(low = "white", high = "red", breaks=seq(0, 500, 100), labels=seq(0, 500, 100)) +
labs(x="Ano de Ingresso na UFRN", y="Ano de Obtenção do Doutorado", fill="Quantidade") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
warnings()
